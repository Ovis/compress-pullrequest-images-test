name: 'Image Compression Action'
description: 'Compress images in a pull request and commit changes if compression exceeds 30%'
author: 'YourName'
inputs:
  max_quality:
    description: 'Maximum quality for jpegoptim (1-100)'
    required: false
    default: '80'

runs:
  using: "composite"
  steps:
    # コードのチェックアウト
    - name: Checkout code
      uses: actions/checkout@v4

    # 圧縮ツールとbase64を利用するためのツールをインストール
    - name: Install image compression tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jpegoptim optipng coreutils
      shell: bash

    # ベースブランチの取得
    - name: Fetch base branch
      run: |
        git fetch origin "${{ github.base_ref }}" --depth=1
      shell: bash

    # 変更されたファイルを取得し、BASE64エンコードして環境変数に設定
    - name: Check changed files
      id: get_changed_files
      run: |
        git diff --name-only --diff-filter=ACMR "origin/${{ github.base_ref }}"..HEAD > changed_files.txt
        echo "Changed files:"
        cat changed_files.txt
        BASE64_CHANGED=$(base64 -w 0 changed_files.txt)
        echo "changed_files_base64=$BASE64_CHANGED" >> $GITHUB_ENV
        rm -f changed_files.txt
      shell: bash

    # 変更された画像を圧縮
    - name: Compress changed images
      id: compress_images
      shell: bash
      run: |
        echo "Starting image compression..."
        DECODED_FILES=$(echo "${{ env.changed_files_base64 }}" | base64 --decode)
        declare -a COMPRESSED_IMAGES=()
        while IFS= read -r file; do
          echo "Target file for processing: $file"
          if [[ "$file" == *.jpg || "$file" == *.jpeg || "$file" == *.png ]]; then
            echo "Processing file: $file"
            ORIGINAL_SIZE=$(stat -c%s "$file")
            echo "Original size: $ORIGINAL_SIZE bytes"
            if [[ "$file" == *.jpg || "$file" == *.jpeg ]]; then
              jpegoptim --max=${{ inputs.max_quality }} "$file"
            elif [[ "$file" == *.png ]]; then
              optipng "$file"
            fi
            COMPRESSED_SIZE=$(stat -c%s "$file")
            echo "Compressed size: $COMPRESSED_SIZE bytes"
            if (( (ORIGINAL_SIZE - COMPRESSED_SIZE) * 100 / ORIGINAL_SIZE >= 30 )); then
              echo "$file compressed by more than 30%"
              COMPRESSED_IMAGES+=("$file")
            else
              echo "$file was not compressed by 30% or more."
            fi
          else
            echo "Skipping non-image file: $file"
          fi
        done <<< "$DECODED_FILES"
        echo "Compressed files: ${COMPRESSED_IMAGES[*]}"
        COMPRESSED_LIST=$(printf "%s\n" "${COMPRESSED_IMAGES[@]}" | base64 -w 0)
        echo "compressed_images_base64=$COMPRESSED_LIST" >> $GITHUB_ENV

    # 圧縮画像が存在すればコミット & プッシュ
    - name: Commit and push if images compressed
      if: env.compressed_images_base64 != 'Cg=='
      shell: bash
      run: |
        DECODED_COMPRESSED=$(echo "${{ env.compressed_images_base64 }}" | base64 --decode)
        echo "Compressed images:"
        echo "$DECODED_COMPRESSED"
        echo "Committing compressed images..."
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git fetch origin ${{ github.head_ref }} --depth=1
        git checkout ${{ github.head_ref }}
        git merge origin/${{ github.head_ref }} --no-edit
        git add .
        git commit -m "Compress images"
        git push origin HEAD:${{ github.head_ref }} || (
          echo "Push failed. Attempting to pull and rebase..."
          git pull --rebase origin ${{ github.head_ref }}
          git push origin HEAD:${{ github.head_ref }}
        )
